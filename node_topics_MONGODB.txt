//multi-Threaded Models
//node Js server (blocking , Non blocking)(//async)(event-driven)
node js (single threaded)
demon thread
//timeout
take example of a website example and check for async wait and timeout
js callback (hell)-------aync wait
js promises
query parameter ?
url parameter /
Step 1: Provide Initial Product Data

Prompt:
I have a list of products in JSON format like this: [paste your product JSON array]. Please help me create a valid products.json file by wrapping this array inside an object with key "products".

Step 2: Create main.js to Add and Read Products

Prompt:
_Please create a main.js file with two functions:

addProduct(newProduct) that reads products.json, adds a new product, and writes back synchronously

readProducts() that reads and returns the product list synchronously from products.json._

Step 3: Create Backup Function with Read-only Permissions

Prompt:
Add a function writeProducts(productsData) in main.js that writes all products to a new file backup_products.json with read-only file permissions.

Step 4: Create User Functions to Read Backup File

Prompt:
_Create three functions in main.js called user1(), user2(), and user3():

user1() reads backup_products.json synchronously and logs all data

user2() reads backup_products.json asynchronously using callbacks and logs all data

user3() reads backup_products.json asynchronously and logs only the product names._

Step 5: Combine and Demonstrate Usage

Prompt:
_Combine all functions in main.js. At the bottom, add example code that:

Adds a new product

Reads all products

Writes backup file

Calls all three user functions to read and log backup file data._

Step 6: Run and Test

Prompt:
Help me run main.js to test all functionality. What commands do I need to run?

Optional Steps (if needed):

Convert async functions to use Promises / async-await

Add CLI input to add products dynamically

Create an Express API to serve products

Add error handling improvements